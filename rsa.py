n = 703736009777184023089624814294592409249277452625745332757748389922801741403132753895424956388387034273861704174435411451253765105079397120958872187527398178629501434078067418714846607682059069798574406610333331388412522990466355618040442382555614571786326428324677722983316749811853794357411141610435300835386989472811731560202124433559716440618403774406013112724584220666211501545924520442351542797557629270882264182262005277582509037749501382261242519580373623050239858729306403575493062068246361660464431979222255286607177960552377520641931539650418675636738331810407143618482992844547670928974936038951567591528689023958925930857444803834201333363376485052184620872889976780466254428553439326683400737459946435445593167513822561889035880970220242237069795421833351399207596652040975400934759313225795135579755501187953271972597453681198882579090204178585215287291128291110497463202519470201521012255346320401213138901745855375111052643539718441410622424114206107789488912852766791798855906045387137685238026023132965295284758960229798469473890259922576073964261667245333787211763578641889188270471779914732986635475166291696191183385894159108087172761399659632496988313359556472198345729909182803713633419634535706321830209222814979844343529993359792049822210621827085536689760389009702997689553065603455028058325949110024034700925643132176608830090061785588510788357781516610820968044274702785671181601679979525489368022505850232422698296830622231341381917787816077661333727833604807554583357712985974577704785671516202413091132893993292970683686899421863161569461866742847558648074310672205645037129605331731697690484700577818986984793993420671697368955082061302307346002601847095016967486236058661466475157477770018271830758803628626695228034702594919681804764373059942089884294278280767176408688480954868977350873363725475724588652349551072461937849095875358280221514251086936156261759875645543336083941415764788378225455988836363175842179378586775701697349161897108495067337158084472874540569

e = 65537

prime1 = 26528023103450132947858474175874300342472094771940046267526404583868791586760087060963897928181342328759020478733523828214886563798189130577671789997049505334339280271203045810752971851385469511655886660083195164343175595950293441259393988990629245928161881406220555598105110295831548726391580454005238978203080170600071454722762764966207364775420575208077288829579519042796845133890595729139975431898426880981077422543787282215119439688838012664703258596111613604644749370653224021951862077978616052525058661261128477903522235635993066123001228916443675008896563714293708582830797347191052278599447190773241096937424899428612340025677128475223083724413351452059176868713118863655776133540889927687274214574728998312294178426803250606395587216486471127704645816694476076868535424782127482853286315126711617027599738713757176671581436434529620666613226566218922763205990134127717253148594542819221896512794250575312814013612612113162481835896155685916032910454362602006214561289121728940878466014801719

prime2 = isqrt(n)

while True:
    prime1 = next_prime(prime2)
    if (n % prime1 == 0):
        print("you got it")
        prime2 = n // prime1
        break
    if ((prime2 * prime1) > n):
        print("too large")
        break
    print(prime2)
    prime2 = prime1

if((prime1*prime2) == n):
    print("these are the primes")
    print(prime1)
    print(prime2)
    

p_minus_one = prime1 - 1
q_minus_one = prime2 - 1
mod = q_minus_one * p_minus_one

# this is d
d = modinv(e, mod)

print("test")

print((e*d) % (q_minus_one * p_minus_one))

print("end of test")

c = 35223675543059154864646091287744473946243875919542266516147338816476772518936867806215113857273555220286287310282013606270991630418128790568745060527142098733612206035473227721769229766872254093811645349742074368005976990063213624229534293221363162756322775987337838417146633330705806313521965313521980911545999930614510988383712227934034366454514275202888416256351195495465065795680521982029283679918868688418405241641694200740173320447551531039146025910057091639305809065644309999698509818065368398651948171033378284686380161816254337551412560056770606413029972431375931888688090472827799520139029435196823868162728588794555983553350414757219260644051752917201778098772032520298742363506759518078660061092466741377953800942793669567191620720929571447941958962052099512370881540017781020141362458009639275036782893275601123045422556121011155030290149935653466795170259975669176029298447097726983240876606360438989921851799446975915969528800715498570613945232222486806427663643929859184196974021452284816098949510727450106736243895421457973793050116266454770206652976827918409818193061696276674769579343022138193067935241793756736935751255814996940872374963038394851758483980018772197694575760610552499418210212077162486611289399707588668289047999968061119211973698952871415607442278709218137094051432914635964716307789065458526843380254714777988545109474026887332914852033455954348820935700693357091860897532463751242933586455470013705430940105324609289647064339688168520686098665957679901819863307372195602097586120755551528135058297710614876117796479922852646195063126349728462538233284522905578065747151852949950391465914572586536484710205887018951800531767433054855439186606805155378484413217045506772772819969588969614904343000795197617597284081242439368020427968767818273241827894427489041744112193299924406959612697960607659586446883386612348180400817651460171606450126310790321694178044541488596803317986963111201260444106712662771837633060397340300136474068170200378118134282702159699235426

hex_string = pow(c,d,mod)
print(hex_string)
